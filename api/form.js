export default async function handler(req, res) {
  // --- –†–∞–∑—Ä–µ—à–∞–µ–º CORS ---
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π' });
    return;
  }

  try {
    const data = req.body;

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
    const errors = validateFormData(data);
    if (errors.length > 0) {
      res.status(400).json({ success: false, errors });
      return;
    }

    // --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    const message = formatMessage(data);

    // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram ---
    const result = await sendToTelegram(message);

    if (result.success) {
      res.status(200).json({
        success: true,
        message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!',
      });
    } else {
      console.error('Telegram API Error:', result.response);
      res.status(500).json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
      });
    }
  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    });
  }
}

// ======================= //
// ====== HELPERS ======= //
// ======================= //

function validateFormData(data) {
  const errors = [];
  if (!data.name || data.name.trim().length < 2)
    errors.push("–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏");

  if (!data.phone || !/^[\+]?[0-9\s\-\(\)]{10,}$/.test(data.phone))
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');

  if (data.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email))
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ email –∞–¥—Ä–µ—Å–∞');

  if (!data.consent)
    errors.push('–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∑–≥–æ–¥–∞ –Ω–∞ –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö');

  return errors;
}

function formatMessage(data) {
  let message = "üé® <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É DASP</b>\n\n";
  message += `üë§ <b>–Ü–º'—è:</b> ${escapeHtml(data.name)}\n`;
  message += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(data.phone)}\n`;

  if (data.email) message += `üìß <b>Email:</b> ${escapeHtml(data.email)}\n`;
  if (data.objectType)
    message += `üè† <b>–¢–∏–ø –æ–±'—î–∫—Ç–∞:</b> ${escapeHtml(data.objectType)}\n`;
  if (data.comment)
    message += `üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b>\n${escapeHtml(data.comment)}\n`;

  message += `\nüåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> ${data.referrer || '–ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø'}`;
  message += `\nüïê <b>–ß–∞—Å:</b> ${new Date().toLocaleString('uk-UA')}`;
  return message;
}

function escapeHtml(text) {
  if (!text) return '';
  const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
  return text.replace(/[&<>"']/g, (m) => map[m]);
}

async function sendToTelegram(message) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN || '8283980015:AAFFcQEPZXdOFg-DacqqHGiVhaHBirkGtuQ';
  const chatId = process.env.TELEGRAM_CHAT_ID || '-1003175062060';
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  const res = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
    }),
  });

  const result = await res.json();
  return { success: res.ok, response: result };
}
